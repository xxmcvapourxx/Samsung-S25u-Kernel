/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COM_QUALCOMM_QTI_LOCATION_Loc_Idl_API_STUB_DEFAULT_HPP_
#define V0_COM_QUALCOMM_QTI_LOCATION_Loc_Idl_API_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v0/com/qualcomm/qti/location/LocIdlAPIStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v0 {
namespace com {
namespace qualcomm {
namespace qti {
namespace location {

/**
 * Provides a default implementation for LocIdlAPIStubRemoteEvent and
 * LocIdlAPIStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT LocIdlAPIStubDefault
    : public virtual LocIdlAPIStub {
public:
    COMMONAPI_EXPORT LocIdlAPIStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(LocIdlAPI::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT LocIdlAPIStubRemoteEvent* initStubAdapter(const std::shared_ptr< LocIdlAPIStubAdapter> &_adapter) {
        CommonAPI::Stub<LocIdlAPIStubAdapter, LocIdlAPIStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual const uint32_t &getGnssCapabilitiesMaskAttribute() {
        return gnssCapabilitiesMaskAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const uint32_t &getGnssCapabilitiesMaskAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getGnssCapabilitiesMaskAttribute();
    }
    COMMONAPI_EXPORT virtual void setGnssCapabilitiesMaskAttribute(uint32_t _value) {
        const bool valueChanged = trySetGnssCapabilitiesMaskAttribute(std::move(_value));
        if (valueChanged) {
            fireGnssCapabilitiesMaskAttributeChanged(gnssCapabilitiesMaskAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual void setGnssCapabilitiesMaskAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) {
        (void)_client;
        setGnssCapabilitiesMaskAttribute(_value);
    }
    COMMONAPI_EXPORT virtual void fireGnssMeasurementsEvent(const ::v0::com::qualcomm::qti::location::LocIdlAPI::IDLGnssMeasurements &_gnssMeasurements) {
        LocIdlAPIStub::fireGnssMeasurementsEvent(_gnssMeasurements);
    }
    COMMONAPI_EXPORT virtual void fireLocationReportEvent(const ::v0::com::qualcomm::qti::location::LocIdlAPI::IDLLocationReport &_locationReport) {
        LocIdlAPIStub::fireLocationReportEvent(_locationReport);
    }
    COMMONAPI_EXPORT virtual void fireEngineLocationsEvent(const std::vector< ::v0::com::qualcomm::qti::location::LocIdlAPI::IDLLocationReport > &_engLocations) {
        LocIdlAPIStub::fireEngineLocationsEvent(_engLocations);
    }
    COMMONAPI_EXPORT virtual void fireGnssSvEvent(const std::vector< ::v0::com::qualcomm::qti::location::LocIdlAPI::IDLGnssSv > &_gnssSvs) {
        LocIdlAPIStub::fireGnssSvEvent(_gnssSvs);
    }
    COMMONAPI_EXPORT virtual void fireGnssNmeaEvent(const uint64_t &_timestamp, const std::string &_nmea) {
        LocIdlAPIStub::fireGnssNmeaEvent(_timestamp, _nmea);
    }
    COMMONAPI_EXPORT virtual void fireEngineNmeaEvent(const ::v0::com::qualcomm::qti::location::LocIdlAPI::IDLLocOutputEngineType &_engType, const uint64_t &_timestamp, const std::string &_nmea) {
        if (!_engType.validate()) {
            return;
        }
        LocIdlAPIStub::fireEngineNmeaEvent(_engType, _timestamp, _nmea);
    }
    COMMONAPI_EXPORT virtual void fireGnssDataEvent(const ::v0::com::qualcomm::qti::location::LocIdlAPI::IDLGnssData &_gnssData) {
        LocIdlAPIStub::fireGnssDataEvent(_gnssData);
    }
    COMMONAPI_EXPORT virtual void startPositionSession(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _intervalInMs, uint32_t _gnssReportCallbackMask, startPositionSessionReply_t _reply) {
        (void)_client;
        (void)_intervalInMs;
        (void)_gnssReportCallbackMask;
        LocIdlAPI::IDLLocationResponse resp = LocIdlAPI::IDLLocationResponse::IDL_LOC_RESP_UNKNOWN;
        if (!resp.validate()) {
            return;
        }
        _reply(resp);
    }
    COMMONAPI_EXPORT virtual void startPositionSession(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _intervalInMs, uint32_t _locReqEngMask, uint32_t _engReportCallbackMask, startPositionSession1Reply_t _reply) {
        (void)_client;
        (void)_intervalInMs;
        (void)_locReqEngMask;
        (void)_engReportCallbackMask;
        LocIdlAPI::IDLLocationResponse resp = LocIdlAPI::IDLLocationResponse::IDL_LOC_RESP_UNKNOWN;
        if (!resp.validate()) {
            return;
        }
        _reply(resp);
    }
    COMMONAPI_EXPORT virtual void stopPositionSession(const std::shared_ptr<CommonAPI::ClientId> _client, stopPositionSessionReply_t _reply) {
        (void)_client;
        _reply();
    }
    COMMONAPI_EXPORT virtual void deleteAidingData(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _aidingDataMask, deleteAidingDataReply_t _reply) {
        (void)_client;
        (void)_aidingDataMask;
        LocIdlAPI::IDLLocationResponse resp = LocIdlAPI::IDLLocationResponse::IDL_LOC_RESP_UNKNOWN;
        if (!resp.validate()) {
            return;
        }
        _reply(resp);
    }
    COMMONAPI_EXPORT virtual void configConstellations(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< LocIdlAPI::IDLGnssSvIdInfo > _svList, configConstellationsReply_t _reply) {
        (void)_client;
        (void)_svList;
        LocIdlAPI::IDLLocationResponse resp = LocIdlAPI::IDLLocationResponse::IDL_LOC_RESP_UNKNOWN;
        if (!resp.validate()) {
            return;
        }
        _reply(resp);
    }
    COMMONAPI_EXPORT virtual void injectMapMatchedFeedbackData(const std::shared_ptr<CommonAPI::ClientId> _client, LocIdlAPI::MapMatchingFeedbackData _mmfData, injectMapMatchedFeedbackDataReply_t _reply) {
        (void)_client;
        (void)_mmfData;
        LocIdlAPI::IDLLocationResponse resp = LocIdlAPI::IDLLocationResponse::IDL_LOC_RESP_UNKNOWN;
        if (!resp.validate()) {
            return;
        }
        _reply(resp);
    }


protected:
    COMMONAPI_EXPORT virtual bool trySetGnssCapabilitiesMaskAttribute(uint32_t _value) {
        if (!validateGnssCapabilitiesMaskAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<LocIdlAPIStubAdapter> stubAdapter = CommonAPI::Stub<LocIdlAPIStubAdapter, LocIdlAPIStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockGnssCapabilitiesMaskAttribute(true);
            valueChanged = (gnssCapabilitiesMaskAttributeValue_ != _value);
            gnssCapabilitiesMaskAttributeValue_ = std::move(_value);
            stubAdapter->lockGnssCapabilitiesMaskAttribute(false);
        } else {
            valueChanged = (gnssCapabilitiesMaskAttributeValue_ != _value);
            gnssCapabilitiesMaskAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateGnssCapabilitiesMaskAttributeRequestedValue(const uint32_t &_value) {
        (void)_value;
        return true;
    }
    COMMONAPI_EXPORT virtual void onRemoteGnssCapabilitiesMaskAttributeChanged() {
        // No operation in default
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual LocIdlAPIStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(LocIdlAPIStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }

        COMMONAPI_EXPORT virtual void onRemoteGnssCapabilitiesMaskAttributeChanged() {
            assert(defaultStub_ !=NULL);
            defaultStub_->onRemoteGnssCapabilitiesMaskAttributeChanged();
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetGnssCapabilitiesMaskAttribute(uint32_t _value) {
            assert(defaultStub_ !=NULL);
            return defaultStub_->trySetGnssCapabilitiesMaskAttribute(std::move(_value));
        }

        COMMONAPI_EXPORT virtual bool onRemoteSetGnssCapabilitiesMaskAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _value) {
            (void)_client;
            return onRemoteSetGnssCapabilitiesMaskAttribute(_value);
        }

    private:
        LocIdlAPIStubDefault *defaultStub_;
    };
protected:
    LocIdlAPIStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    uint32_t gnssCapabilitiesMaskAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace location
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v0


// Compatibility
namespace v0_2 = v0;

#endif // V0_COM_QUALCOMM_QTI_LOCATION_Loc_Idl_API_STUB_DEFAULT
